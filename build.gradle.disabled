plugins {
    id 'fabric-loom' version '0.8-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group



repositories {
    mavenCentral()

    maven {
        url 'https://maven.legacyfabric.net/'
    }

    maven {
        name = "Fabric maven"
        url = "https://maven.fabricmc.net/"
    }

    maven {
        name = "Haven's Maven"
        url = "https://hephaestus.dev/release"
    }

    maven {
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        url = "https://server.bbkr.space/artifactory/libs-release"
        content {
            includeGroup "io.github.cottonmc"
        }
    }

    maven {
        name = "Ladysnake Libs"
        url = "https://dl.bintray.com/ladysnake/libs"
    }

    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }

    maven {
        url = "https://maven.shedaniel.me/"
    }

//	maven {
//		url = "https://bai.jfrog.io/artifactory/maven"
//	}

    maven {
        url = "https://jitpack.io"
    }

    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }

    maven {
        name = "Libs"
        url = "./libs"
        metadataSources {
            artifact()
        }
    }

}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    includeCompile("com.github.DimensionalDevelopment", "Matrix", "1.0.0")

    // Replace modImplementation with modApi if you expose components in your own API
    include(modImplementation("io.github.onyxstudios:Cardinal-Components-API:${project.cca_version}"))
    includeCompile("me.shedaniel.cloth", "cloth-config-fabric", "5.0.34")


    modCompileOnly("com.terraformersmc:modmenu:2.0.0-beta.7") {
        exclude module: "fabric-api"
    }
    modRuntime("com.terraformersmc:modmenu:2.0.0-beta.7") {
        exclude module: "fabric-api"
    }

    modCompileOnly('mcp.mobius.waila:wthit-fabric:3.5.1') {
        exclude module: "modmenu"
        exclude module: "fabric-api"
    }
    modRuntime('mcp.mobius.waila:wthit-fabric:3.5.1') {
        exclude module: "modmenu"
        exclude module: "fabric-api"
    }
    modCompileOnly "me.shedaniel.cloth.api:cloth-datagen-api-v1:2.0.0"
    modRuntime "me.shedaniel.cloth.api:cloth-datagen-api-v1:2.0.0"

}
sourceSets {
    main {
        java {
            srcDir "src/main/config"
        }
    }
}

def includeCompile(group, artifact, version) {
    project.dependencies {
        modCompileOnly("$group:$artifact:$version") {
            exclude module: "fabric-api"
        }
        modRuntime("$group:$artifact:$version") {
            exclude module: "fabric-api"
        }
        include("$group:$artifact:$version")
    }

    project.publishing {
        publications {
            mavenJava(MavenPublication) {
                pom.withXml {
                    def depsNode = asNode().appendNode("dependencies")
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", group)
                    depNode.appendNode("artifactId", artifact)
                    depNode.appendNode("version", version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

version = computeVersion(project.mod_version)
archivesBaseName = "ModScience"

static def computeVersion(String version) {
    if (version.contains("alpha") || version.contains("beta")) {
        return version + "-" + Calendar.getInstance().getTime().format("dd.MM.yyyy")
    }
    return version
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}


// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()

    }
}
